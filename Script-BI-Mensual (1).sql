USE [GD1C2020]
GO


--Eliminar funcion
	IF  EXISTS (SELECT TOP 1 1 FROM sys.objects WHERE 
        object_id = OBJECT_ID(N'[GDD2020].[cantCamas]')
         AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
	DROP FUNCTION [GDD2020].[cantCamas]
	Print('Funcion cantidad de camas eliminada')
	END
GO


IF EXISTS ( SELECT * FROM sysobjects WHERE  id = object_id(N'GDD2020.InsertarFecha') AND OBJECTPROPERTY(id, N'IsProcedure') = 1 )
	DROP PROCEDURE [GDD2020].InsertarFecha

	GO

--Creando Funciones
CREATE FUNCTION [GDD2020].[cantCamas](@tipoDesc NVARCHAR(50))
RETURNS INT AS 
BEGIN
	DECLARE @retorno INT 

	IF @tipoDesc = 'Base Simple'  
		   RETURN 1
	IF @tipoDesc = 'Base Doble'  
			   RETURN 2
	IF @tipoDesc = 'Base Triple'  
			   RETURN 3
	IF @tipoDesc = 'Base Cuadruple'  
			   RETURN 4
	IF @tipoDesc = 'King'  
			   RETURN 2

	RETURN 2
END
GO

BEGIN

--Eliminar Contraits
	PRINT('Eliminando constraints...')

		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_FECHA_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_CLIENTE_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_PROVEEDOR_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_ORIGEN_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_DESTINO_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_TIPO_BUTACA_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_RUTA_AEREA_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_AVION_ID

	--VENTAS ESTADIA
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_ESTADIA')  )
	ALTER TABLE [GDD2020].[VENTAS_ESTADIAS] DROP CONSTRAINT FK_VENTAS_ESTADIA_FECHA_ID

		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_ESTADIA')  )
	ALTER TABLE [GDD2020].[VENTAS_ESTADIAS] DROP CONSTRAINT FK_VENTAS_ESTADIA_CLIENTE_ID

		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_ESTADIA')  )
	ALTER TABLE [GDD2020].[VENTAS_ESTADIAS] DROP CONSTRAINT FK_VENTAS_ESTADIA_PROVEEDOR_ID

-- ELIMINAR TABLAS 
PRINT('Eliminando tablas')

	IF OBJECT_ID('[GDD2020].[VENTAS_PASAJES]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[VENTAS_PASAJES]

	IF OBJECT_ID('[GDD2020].[VENTAS_ESTADIAS]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[VENTAS_ESTADIAS]

	IF OBJECT_ID('[GDD2020].[CIUDADES]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[CIUDADES]
	
	IF OBJECT_ID('[GDD2020].[Fecha]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[Fecha]

	IF OBJECT_ID('[GDD2020].[CLIENTE_BI]', 'U') IS NOT NULL 
		DROP TABLE [GDD2020].[CLIENTE_BI]

	IF OBJECT_ID('[GDD2020].[PROVEEDOR_BI]', 'U') IS NOT NULL 
		DROP TABLE [GDD2020].[PROVEEDOR_BI]

	IF OBJECT_ID('[GDD2020].[TIPO_HABITACION_BI]', 'U') IS NOT NULL 
		DROP TABLE [GDD2020].[TIPO_HABITACION_BI]

	IF OBJECT_ID('[GDD2020].[AVION_BI]', 'U') IS NOT NULL 
		DROP TABLE [GDD2020].[AVION_BI]

	IF OBJECT_ID('[GDD2020].[RUTA_AEREA_BI]', 'U') IS NOT NULL 
		DROP TABLE [GDD2020].[RUTA_AEREA_BI]

	IF OBJECT_ID('[GDD2020].[TIPO_BUTACA_BI]', 'U') IS NOT NULL 
		DROP TABLE [GDD2020].[TIPO_BUTACA_BI]
		
SET LANGUAGE Spanish

--CREANDO NUEVAS TABLAS
	PRINT('Creando tablas')
	
	-- Dimension Ciudades
	CREATE TABLE [GDD2020].[CIUDADES](
		CIUDADES_ID BIGINT IDENTITY(1,1) PRIMARY KEY,
		CIUDADES_NOMBRE [nvarchar](255) NOT NULL,
	)ON [PRIMARY]

	-- Dimensi칩n Fecha (el mes sera nuestra granularidad minima) 
	CREATE TABLE [GDD2020].Fecha(
	   [DateKey] [int] NOT NULL PRIMARY KEY, /* Formato: AAAAMMDD */   
	   [Mes] [tinyint] NULL,  /* Numero: 1 to 12 */
	   [Trimestre] [tinyint] NULL,  
	   [Semestre] [tinyint] NULL,  
	   [Anio] [char](4) NULL, 
	   [Anio_Mes] [nvarchar](25) NULL,/* Mes + a침o */
	   [Anio_Trimestre] [nvarchar](25) NULL,/* Trimestre + a침o */
	   [Anio_semestre] [nvarchar](25) NULL,/*  Semestre + a침o */
	   [Nombre_Mes] [nvarchar](10) NULL, /* Enero a Diciembre */
	)ON [PRIMARY]

	CREATE TABLE [GDD2020].[CLIENTE_BI](
		[CLIENTE_NUMERO] BIGINT PRIMARY KEY,
		[CLIENTE_APELLIDO] [nvarchar](255)  NOT NULL,
		[CLIENTE_NOMBRE] [nvarchar](255)  NOT NULL,
		[CLIENTE_DNI] [decimal](18,0) NOT NULL,
		[CLIENTE_FECHA_NAC] [datetime2](3) NOT  NULL,
	)ON [PRIMARY]

	CREATE TABLE [GDD2020].[PROVEEDOR_BI](
		[PROVEEDOR_CODIGO] BIGINT PRIMARY KEY,
		[EMPRESA_RAZON_SOCIAL] [nvarchar](255) NOT NULL
	)ON [PRIMARY]

	CREATE TABLE [GDD2020].[TIPO_HABITACION_BI](
		TIPO_HABITACION_CODIGO [decimal](18, 0) PRIMARY KEY,
		TIPO_HABITACION_DESC [nvarchar](50) NOT NULL,
	TIPO_HABITACION_CANTIDAD_CAMAS INT,
	)ON [PRIMARY]

	CREATE TABLE [GDD2020].[AVION_BI](
		AVION_IDENTIFICADOR [nvarchar](50) NOT NULL PRIMARY KEY ,
		AVION_MODELO[nvarchar](50),
	)ON [PRIMARY]

	CREATE TABLE [GDD2020].[RUTA_AEREA_BI](
		RUTA_AEREA_ID BIGINT NOT NULL PRIMARY KEY,
		RUTA_AEREA_CODIGO decimal (18,0) NOT NULL,
		RUTA_AEREA_CIU_ORIG [nvarchar](255) NOT NULL,
		RUTA_AEREA_CIU_DEST [nvarchar](255) NOT NULL,
	)ON [PRIMARY]

	CREATE TABLE [GDD2020].[TIPO_BUTACA_BI](
		TIPO_BUTACA_CODIGO BIGINT PRIMARY KEY,
		TIPO_BUTACA_DESCRIPCION [nvarchar](255) NOT NULL,
	)ON [PRIMARY]

	-- Tabla de hechos Ventas Pasajes.
	-- Solo analizamos las ventas, no tenemos en cuenta los pasajes que no estan vendidos. Tomamos como referencia la fecha de la factura.
	CREATE TABLE [GDD2020].[VENTAS_PASAJES](
		[VENTAS_FECHA_ID] [int]  NOT NULL,
		[VENTAS_CLIENTE_ID] BIGINT NOT NULL, 
		[VENTAS_PROVEEDOR_ID] BIGINT NOT NULL,
		[VENTAS_CIUDAD_ORIGEN_ID] BIGINT  NOT NULL,
		[VENTAS_CIUDAD_DESTINO_ID] BIGINT NOT NULL,
		[VENTAS_TIPO_BUTACA_ID] BIGINT,
		[VENTAS_RUTA_AEREA_ID] BIGINT NOT NULL,
		[VENTAS_AVION_ID] nvarchar(50) NOT NULL,
		--medidas:
		[VENTAS_Cantidad_Pasajes][int]  NOT NULL,
		[VENTAS_PRECIO_COSTO][decimal](18, 0) NOT NULL,
		[VENTAS_PRECIO_VENTA][decimal](18, 0) NOT NULL,
		[VENTAS_UTILIDAD][decimal](18, 0) NOT NULL,	
		[VENTAS_CLIENTE_EDAD] BIGINT NOT NULL, 
		CONSTRAINT FK_VENTAS_PASAJES_FECHA_ID FOREIGN KEY([VENTAS_FECHA_ID]) REFERENCES [GDD2020].[Fecha]([DateKey]),
		CONSTRAINT FK_VENTAS_PASAJES_CLIENTE_ID FOREIGN KEY([VENTAS_CLIENTE_ID]) REFERENCES [GDD2020].[CLIENTE_BI]([CLIENTE_NUMERO]),
		CONSTRAINT FK_VENTAS_PASAJES_PROVEEDOR_ID FOREIGN KEY([VENTAS_PROVEEDOR_ID]) REFERENCES [GDD2020].[PROVEEDOR_BI]([PROVEEDOR_CODIGO]),
		CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_ORIGEN_ID FOREIGN KEY([VENTAS_CIUDAD_ORIGEN_ID]) REFERENCES [GDD2020].[CIUDADES]([CIUDADES_ID]),
		CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_DESTINO_ID FOREIGN KEY([VENTAS_CIUDAD_DESTINO_ID]) REFERENCES [GDD2020].[CIUDADES]([CIUDADES_ID]),
		CONSTRAINT FK_VENTAS_PASAJES_TIPO_BUTACA_ID FOREIGN KEY([VENTAS_TIPO_BUTACA_ID]) REFERENCES [GDD2020].[TIPO_BUTACA_BI]([TIPO_BUTACA_CODIGO]),
		CONSTRAINT FK_VENTAS_PASAJES_RUTA_AEREA_ID FOREIGN KEY([VENTAS_RUTA_AEREA_ID]) REFERENCES [GDD2020].[RUTA_AEREA_BI]([RUTA_AEREA_ID]),
		CONSTRAINT FK_VENTAS_PASAJES_AVION_ID FOREIGN KEY([VENTAS_AVION_ID]) REFERENCES [GDD2020].[AVION_BI]([AVION_IDENTIFICADOR])
	)ON [PRIMARY]

	-- Tabla de hechos Venta Estadias

	-- Solo analizamos las ventas, no tenemos en cuenta las estadias que no estan vendidos. Tomamos como referencia la fecha de la factura.
	CREATE TABLE [GDD2020].[VENTAS_ESTADIAS](
		[VENTAS_FECHA_ID] [int]  NOT NULL,
		[VENTAS_CLIENTE_ID] BIGINT NOT NULL, 
		[VENTAS_PROVEEDOR_ID] BIGINT NOT NULL,
		--medidas:
		[VENTAS_CLIENTE_EDAD] BIGINT NOT NULL, 
		[VENTAS_CANTIDAD_CAMAS][int]  NOT NULL,
		[VENTAS_CANTIDAD_HABITACIONES][int]  NOT NULL,
		[VENTAS_ESTADIA_CANTIDAD_NOCHES] BIGINT NOT NULL,
		[VENTAS_PRECIO_COSTO][decimal](18, 0) NOT NULL,
		[VENTAS_PRECIO_VENTA][decimal](18, 0) NOT NULL,
		[VENTAS_UTILIDAD][decimal](18, 0) NOT NULL,	
		CONSTRAINT FK_VENTAS_ESTADIA_FECHA_ID FOREIGN KEY([VENTAS_FECHA_ID]) REFERENCES [GDD2020].[Fecha]([DateKey]),
		CONSTRAINT FK_VENTAS_ESTADIA_CLIENTE_ID FOREIGN KEY([VENTAS_CLIENTE_ID]) REFERENCES [GDD2020].[CLIENTE_BI]([CLIENTE_numero]),
		CONSTRAINT FK_VENTAS_ESTADIA_PROVEEDOR_ID FOREIGN KEY([VENTAS_PROVEEDOR_ID]) REFERENCES [GDD2020].[PROVEEDOR_BI]([PROVEEDOR_CODIGO])
	)ON [PRIMARY]

	-- TEMPORALES ESTADIA
	CREATE TABLE [GDD2020].[#FACTURA_ESTADIA](
		FACTURA_FECHA [datetime2](7),
		NUMERO_CLIENTE BIGINT NOT NULL,
		COMPRA_NUMERO [decimal](18, 0) NOT NULL,
		PROVEEDOR BIGINT NOT NULL,
		PRECIO_COMPRA [decimal](18, 2),
		CANTIDAD_NOCHES INT,
		TIPO_HABITACION BIGINT,
		PRECIO_VENTA [decimal](18, 2),
		UTILIDAD [decimal](18, 2),
		)ON [PRIMARY]
	
	-- TABLA TEMPORAL PASAJE
	CREATE TABLE [GDD2020].[#FACTURA_PASAJES](
		FACTURA_FECHA [datetime2](7),
		NUMERO_CLIENTE BIGINT NOT NULL,
		COMPRA_NUMERO [decimal](18, 0) NOT NULL,
		PROVEEDOR BIGINT NOT NULL,
		TIPO_BUTACA_ID BIGINT NOT NULL,
		RUTA_AEREA_ID BIGINT NOT NULL,
		AVION_ID [nvarchar](255)  NOT NULL,
		PRECIO_COSTO [decimal](18, 2),
		PRECIO_VENTA [decimal](18, 2),
		UTILIDAD [decimal](18, 2),
	)ON [PRIMARY]

END
-- Stored Procedure que inserta cada una de las fechas:
USE [GD1C2020]
GO

-- Procedures
PRINT('Creando Procedures')
GO
create procedure [GDD2020].InsertarFecha
   @CurrentDate datetime
as
insert into [GDD2020].Fecha
		([DateKey], 	
		[Nombre_Mes],
	     [Mes], [Trimestre], [Anio],
	     [Semestre], 
		[Anio_Mes],
	     [Anio_Trimestre], 
		[Anio_Semestre])
   values(
     	(DATEPART(year , @CurrentDate) * 100) + (DATEPART(month , @CurrentDate)*1),
      	DATENAME(month, @CurrentDate),
      	DATEPART(month , @CurrentDate),
      	DATEPART(quarter , @CurrentDate),
      	DATEPART(year , @CurrentDate),
      	CASE WHEN DATEPART(quarter , @CurrentDate) < 3 THEN 1  ELSE 2. END,
      	CAST(DATEPART(year , @CurrentDate) as char(4)) + '-' + RIGHT('0'+CAST(DATEPART(month , @CurrentDate) AS varchar(2)),2),
      	CAST(DATEPART(year , @CurrentDate) as char(4)) + '-' + CAST(DATEPART(quarter , @CurrentDate) AS varchar(1)),
      	CAST(DATEPART(year , @CurrentDate) as char(4)) + '-' + CAST(CASE WHEN DATEPART(quarter , @CurrentDate) < 3 THEN 1 ELSE 2 END AS char(2))
   )
GO
--Bucle de carga de Fechas
--Dejamos cargadas las fechas desde 01/01/2015 al 31/12/2025

declare @StartDate datetime= CONVERT(datetime,'20150101',102), @EndDate datetime =CONVERT(datetime,'20301231',102)
while @StartDate <= @EndDate begin
                       exec [GDD2020].InsertarFecha @StartDate
   set @StartDate = dateadd(month,1,@StartDate)
end

--MIGRANDO DATOS
PRINT('Migrando Datos')

--cargar ciudades
INSERT INTO GDD2020.CIUDADES
SELECT DISTINCT RUTA_AEREA_CIU_DEST
	FROM GDD2020.RUTA_AEREA
	
--INSERTAR EN TABLA CLIENTE	 BI
INSERT INTO GDD2020.CLIENTE_BI (CLIENTE_NUMERO, 
			CLIENTE_APELLIDO, CLIENTE_NOMBRE,
			CLIENTE_DNI, CLIENTE_FECHA_NAC)	
SELECT CLIENTE_NUMERO, CLIENTE_APELLIDO, CLIENTE_NOMBRE, 
				CLIENTE_DNI, CLIENTE_FECHA_NAC FROM GDD2020.CLIENTE

--INSERTAR TABLA PROVEEDOR BI OK
INSERT INTO GDD2020.PROVEEDOR_BI (PROVEEDOR_CODIGO, EMPRESA_RAZON_SOCIAL)			
SELECT PROVEEDOR_CODIGO,EMPRESA_RAZON_SOCIAL  
FROM GDD2020.PROVEEDOR

--INSERTAR TABLA RUTA AEREA BI OK
INSERT INTO GDD2020.RUTA_AEREA_BI(RUTA_AEREA_ID, RUTA_AEREA_CODIGO,RUTA_AEREA_CIU_ORIG,RUTA_AEREA_CIU_DEST)
SELECT RUTA_AEREA_ID, RUTA_AEREA_CODIGO,RUTA_AEREA_CIU_ORIG, RUTA_AEREA_CIU_DEST
FROM GDD2020.RUTA_AEREA

--INSERTAR TIPO_BUTACA BI --ok
INSERT INTO GDD2020.TIPO_BUTACA_BI(TIPO_BUTACA_CODIGO, TIPO_BUTACA_DESCRIPCION)
SELECT tb.TIPO_BUTACA_CODIGO, tb.TIPO_BUTACA_DESCRIPCION
FROM GDD2020.TIPO_BUTACA tb

--TIPO HABITACION --OK
INSERT INTO GDD2020.TIPO_HABITACION_BI(TIPO_HABITACION_CODIGO,
		TIPO_HABITACION_DESC, TIPO_HABITACION_CANTIDAD_CAMAS)
SELECT TIPO_HABITACION_CODIGO,TIPO_HABITACION_DESC, GDD2020.cantCamas(TIPO_HABITACION_DESC) 
FROM GDD2020.TIPO_HABITACION

--INSERTAR AVION --ok
INSERT INTO GDD2020.AVION_BI(AVION_IDENTIFICADOR,AVION_MODELO)
SELECT AVION_IDENTIFICADOR ,AVION_MODELO
FROM GDD2020.AVION
	
	-- TABLA TEMPORAL FACTURA ESTADIA
	INSERT INTO #FACTURA_ESTADIA(FACTURA_FECHA, NUMERO_CLIENTE, COMPRA_NUMERO, PROVEEDOR,
		PRECIO_COMPRA, CANTIDAD_NOCHES, TIPO_HABITACION, PRECIO_VENTA, UTILIDAD) 
	SELECT fa.FACTURA_FECHA, fa.NUMERO_CLIENTE, fa.COMPRA_NUMERO, cp.PROVEEDOR_CODIGO,
			ce.ESTADIA_PRECIO_COSTO, ce.ESTADIA_CANTIDAD_NOCHES, ha.TIPO_HABITACION_CODIGO,
				ve.ESTADIA_PRECIO_VENTA, ve.ESTADIA_PRECIO_VENTA - ce.ESTADIA_PRECIO_COSTO
	FROM GDD2020.FACTURA fa 
	JOIN GDD2020.COMPRA cp
		ON fa.COMPRA_NUMERO = cp.COMPRA_NUMERO
	JOIN GDD2020.COMPRA_ESTADIA ce
		ON cp.COMPRA_NUMERO = ce.ESTADIA_COMPRA_NUMERO
	JOIN GDD2020.HABITACION ha
		ON ce.HABITACION_ID = ha.HABITACION_ID
	JOIN GDD2020.VENTA_ESTADIA ve
		ON fa.FACTURA_NRO = ve.FACTURA_NRO

		
INSERT INTO #FACTURA_PASAJES(FACTURA_FECHA, NUMERO_CLIENTE, COMPRA_NUMERO,
				PROVEEDOR, TIPO_BUTACA_ID, RUTA_AEREA_ID,
					AVION_ID, PRECIO_COSTO, PRECIO_VENTA, UTILIDAD)
SELECT fa.FACTURA_FECHA, fa.NUMERO_CLIENTE, fa.COMPRA_NUMERO,
			cp.PROVEEDOR_CODIGO, pa.PASAJE_TIPO_BUTACA, vue.VUELO_RUTA_AEREA_ID,
			vue.VUELO_AVION_IDENTIFICADOR, pa.PASAJE_COSTO, pa.PASAJE_PRECIO,
			pa.PASAJE_PRECIO - pa.PASAJE_COSTO
	FROM GDD2020.FACTURA fa 
	JOIN GDD2020.PASAJE pa
		ON fa.FACTURA_NRO = pa.PASAJE_FACTURA_NRO
	JOIN GDD2020.VUELO vue
		ON pa.VUELO_CODIGO = vue.VUELO_CODIGO
	JOIN GDD2020.COMPRA cp  
		ON pa.PASAJE_COMPRA_NRO = cp.COMPRA_NUMERO

PRINT('Insertando en Tablas de Hechos')

	--Tabla Hechos Ventas_Estadias

	INSERT INTO  [GDD2020].[VENTAS_ESTADIAS](
		[VENTAS_FECHA_ID],
		[VENTAS_CLIENTE_ID], 
		[VENTAS_PROVEEDOR_ID],
		--medidas:
		[VENTAS_CLIENTE_EDAD], 
		[VENTAS_CANTIDAD_CAMAS],
		[VENTAS_CANTIDAD_HABITACIONES],
		[VENTAS_ESTADIA_CANTIDAD_NOCHES],
		[VENTAS_PRECIO_COSTO],
		[VENTAS_PRECIO_VENTA],
		[VENTAS_UTILIDAD])
	SELECT (DATEPART(year , fe.FACTURA_FECHA) * 100) + 
				(DATEPART(month ,fe.FACTURA_FECHA)*1), 
	fe.NUMERO_CLIENTE, 
	fe.PROVEEDOR, 
	AVG(
		(DATEDIFF(YEAR,clibi.CLIENTE_FECHA_NAC,fe.FACTURA_FECHA)
			-(CASE
			WHEN DATEADD(YY,DATEDIFF(YEAR,clibi.CLIENTE_FECHA_NAC,fe.FACTURA_FECHA),clibi.CLIENTE_FECHA_NAC)>GETDATE() THEN 1
			ELSE 0 END) )
	),
	SUM(tabi.TIPO_HABITACION_CANTIDAD_CAMAS),
	SUM(1),
	SUM(fe.CANTIDAD_NOCHES),
	SUM(fe.PRECIO_COMPRA),
	SUM(fe.PRECIO_VENTA),
	SUM(fe.UTILIDAD)
FROM #FACTURA_ESTADIA fe
	JOIN GDD2020.CLIENTE_BI clibi
		ON fe.NUMERO_CLIENTE = clibi.CLIENTE_NUMERO
	JOIN GDD2020.TIPO_HABITACION_BI tabi
		ON fe.TIPO_HABITACION = tabi.TIPO_HABITACION_CODIGO
GROUP BY (DATEPART(year , fe.FACTURA_FECHA) * 100) + 
				(DATEPART(month ,fe.FACTURA_FECHA)*1), 
	fe.NUMERO_CLIENTE, 
	fe.PROVEEDOR

--Tabla Ventas_Pasajes

	INSERT INTO GDD2020.VENTAS_PASAJES(
		VENTAS_FECHA_ID,
		VENTAS_CLIENTE_ID,
		VENTAS_PROVEEDOR_ID,
		VENTAS_CIUDAD_ORIGEN_ID,
		VENTAS_CIUDAD_DESTINO_ID,
		VENTAS_TIPO_BUTACA_ID,
		VENTAS_RUTA_AEREA_ID,
		VENTAS_AVION_ID,
		VENTAS_Cantidad_Pasajes,
		VENTAS_PRECIO_COSTO,
		VENTAS_PRECIO_VENTA,
		VENTAS_UTILIDAD,
		VENTAS_CLIENTE_EDAD)
	SELECT 
	( DATEPART(year, fp.FACTURA_FECHA ) *100 
			+ DATEPART(MONTH, fp.FACTURA_FECHA )),
		fp.NUMERO_CLIENTE,
		fp.PROVEEDOR, 
		ciuOri.CIUDADES_ID,
		ciuDest.CIUDADES_ID,
		fp.TIPO_BUTACA_ID,
		fp.RUTA_AEREA_ID,
		fp.AVION_ID,
		SUM(1),
		SUM(fp.PRECIO_COSTO),
		SUM(fp.PRECIO_VENTA),
		SUM(fp.UTILIDAD),	 
		AVG (
			(DATEDIFF(YEAR,clibi.CLIENTE_FECHA_NAC,fp.FACTURA_FECHA)
					-(CASE
				  WHEN DATEADD(YY,DATEDIFF(YEAR,clibi.CLIENTE_FECHA_NAC,fp.FACTURA_FECHA),clibi.CLIENTE_FECHA_NAC)>GETDATE() THEN 1
				  ELSE 0 END)) 
			)
		FROM #FACTURA_PASAJES fp
			JOIN GDD2020.RUTA_AEREA_BI rabi
				ON fp.RUTA_AEREA_ID = rabi.RUTA_AEREA_ID
			JOIN GDD2020.CIUDADES ciuOri
				ON rabi.RUTA_AEREA_CIU_ORIG = ciuOri.CIUDADES_NOMBRE
			JOIN GDD2020.CIUDADES ciuDest
				ON rabi.RUTA_AEREA_CIU_DEST = ciuDest.CIUDADES_NOMBRE
			JOIN GDD2020.CLIENTE_BI clibi
				ON fp.NUMERO_CLIENTE = clibi.CLIENTE_NUMERO
		GROUP BY ( DATEPART(year, fp.FACTURA_FECHA ) *100 
			+ DATEPART(MONTH, fp.FACTURA_FECHA )),
		fp.NUMERO_CLIENTE, fp.PROVEEDOR, ciuOri.CIUDADES_ID,
		ciuDest.CIUDADES_ID, fp.TIPO_BUTACA_ID, fp.RUTA_AEREA_ID, fp.AVION_ID
		ORDER BY 1

-- Borrar temporales
drop table #factura_estadia
drop table #factura_pasajes
