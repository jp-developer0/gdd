USE [GD1C2020]
GO
--Eliminar funcion
	

	IF  EXISTS (SELECT TOP 1 1 FROM sys.objects WHERE 
        object_id = OBJECT_ID(N'[GDD2020].[cantCamas]')
         AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
	DROP FUNCTION [GDD2020].[cantCamas]
	Print('Funcion cantidad de camas eliminada')
	END
GO
--Creando Funciones


CREATE FUNCTION [GDD2020].[cantCamas](@tipoDesc NVARCHAR(50))
RETURNS INT AS 
BEGIN
	DECLARE @retorno INT 

	IF @tipoDesc = 'Base Simple'  
		   RETURN 1
	IF @tipoDesc = 'Base Doble'  
			   RETURN 2
	IF @tipoDesc = 'Base Triple'  
			   RETURN 3
	IF @tipoDesc = 'Base Cuadruple'  
			   RETURN 4
	IF @tipoDesc = 'King'  
			   RETURN 2

	RETURN 2
END
GO


SET LANGUAGE Spanish

BEGIN

--Eliminar Contraits
	PRINT('Eliminando constraints...')

		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_FECHA_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_CLIENTE_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_PROVEEDOR_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_ORIGEN_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_DESTINO_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_TIPO_BUTACA_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_RUTA_AEREA_ID
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_PASAJES')  )
	ALTER TABLE [GDD2020].[VENTAS_PASAJES] DROP CONSTRAINT FK_VENTAS_PASAJES_AVION_ID



	--VENTAS ESTADIA
		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_ESTADIA')  )
	ALTER TABLE [GDD2020].[VENTAS_ESTADIAS] DROP CONSTRAINT FK_VENTAS_ESTADIA_FECHA_ID

		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_ESTADIA')  )
	ALTER TABLE [GDD2020].[VENTAS_ESTADIAS] DROP CONSTRAINT FK_VENTAS_ESTADIA_CLIENTE_ID

		IF EXISTS (  SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[GDD2020].VENTAS_ESTADIA')  )
	ALTER TABLE [GDD2020].[VENTAS_ESTADIAS] DROP CONSTRAINT FK_VENTAS_ESTADIA_PROVEEDOR_ID
	
/*	
--Eliminar stored procedures
	PRINT('Eliminando Stored Procedures..')
	
	IF EXISTS (SELECT name FROM sysobjects WHERE name = 'InsertarFecha' AND type = 'P') 
  	DROP PROCEDURE [GDD2020].InsertarFecha
*/




-- ELIMINAR TABLAS 

	IF OBJECT_ID('[GDD2020].[CIUDADES]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[CIUDADES]

	IF OBJECT_ID('[GDD2020].[VENTAS_PASAJES]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[VENTAS_PASAJES]

	IF OBJECT_ID('[GDD2020].[VENTAS_ESTADIAS]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[VENTAS_ESTADIAS]

	IF OBJECT_ID('[GDD2020].[Fecha]', 'U') IS NOT NULL 
	DROP TABLE [GDD2020].[Fecha]

--CREANDO NUEVAS TABLAS
	PRINT('Creando tablas')
	
	-- Dimensi칩n Fecha (el mes sera nuestra granularidad minima) 
	CREATE TABLE [GDD2020].Fecha(
	   [DateKey] [int] NOT NULL PRIMARY KEY, /* Formato: AAAAMMDD */   
	   [Mes] [tinyint] NULL,  /* Numero: 1 to 12 */
	   [Trimestre] [tinyint] NULL,  
	   [Semestre] [tinyint] NULL,  
	   [Anio] [char](4) NULL, 
	   [Anio_Mes] [nvarchar](25) NULL,/* Mes + a침o */
	   [Anio_Trimestre] [nvarchar](25) NULL,/* Trimestre + a침o */
	   [Anio_semestre] [nvarchar](25) NULL,/*  Semestre + a침o */
	   [Nombre_Mes] [nvarchar](10) NULL, /* Enero a Diciembre */
	)ON [PRIMARY]
	
	-- Dimension Ciudades
	CREATE TABLE [GDD2020].[CIUDADES](
		CIUDADES_ID BIGINT IDENTITY(1,1) PRIMARY KEY,
		CIUDADES_NOMBRE [nvarchar](255) NOT NULL,
	)ON [PRIMARY]

	
	/*  HACEMOS UNA TABLA DE HECHOS PARA LA INFORMACION DE  PASAJES Y OTRA PARA ESTADIAS...*/

	-- Tabla de hechos Ventas Pasajes.
	-- Solo analizamos las ventas, no tenemos en cuenta los pasajes que no estan vendidos. Tomamos como referencia la fecha de la factura.
	--drop table [GDD2020].[VENTAS_PASAJES]
	CREATE TABLE [GDD2020].[VENTAS_PASAJES](
		[VENTAS_FECHA_ID] [int]  NOT NULL,
		[VENTAS_CLIENTE_ID] BIGINT NOT NULL, 
		[VENTAS_PROVEEDOR_ID] BIGINT NOT NULL,
		[VENTAS_CIUDAD_ORIGEN_ID] BIGINT  NOT NULL,
		[VENTAS_CIUDAD_DESTINO_ID] BIGINT NOT NULL,
		[VENTAS_TIPO_BUTACA_ID] BIGINT,
		[VENTAS_RUTA_AEREA_ID] BIGINT NOT NULL,
		[VENTAS_AVION_ID] nvarchar(50) NOT NULL,
		--medidas:
		[VENTAS_Cantidad_Pasajes][int]  NOT NULL,
		[VENTAS_PRECIO_COSTO][decimal](18, 0) NOT NULL,
		[VENTAS_PRECIO_VENTA][decimal](18, 0) NOT NULL,
		[VENTAS_UTILIDAD][decimal](18, 0) NOT NULL,	
		[VENTAS_CLIENTE_EDAD] BIGINT NOT NULL, 
		CONSTRAINT FK_VENTAS_PASAJES_FECHA_ID FOREIGN KEY([VENTAS_FECHA_ID]) REFERENCES [GDD2020].[Fecha]([DateKey]),
		CONSTRAINT FK_VENTAS_PASAJES_CLIENTE_ID FOREIGN KEY([VENTAS_CLIENTE_ID]) REFERENCES [GDD2020].[CLIENTE]([CLIENTE_NUMERO]),
		CONSTRAINT FK_VENTAS_PASAJES_PROVEEDOR_ID FOREIGN KEY([VENTAS_PROVEEDOR_ID]) REFERENCES [GDD2020].[PROVEEDOR]([PROVEEDOR_CODIGO]),
		CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_ORIGEN_ID FOREIGN KEY([VENTAS_CIUDAD_ORIGEN_ID]) REFERENCES [GDD2020].[CIUDADES]([CIUDADES_ID]),
		CONSTRAINT FK_VENTAS_PASAJES_CIUDAD_DESTINO_ID FOREIGN KEY([VENTAS_CIUDAD_DESTINO_ID]) REFERENCES [GDD2020].[CIUDADES]([CIUDADES_ID]),
		CONSTRAINT FK_VENTAS_PASAJES_TIPO_BUTACA_ID FOREIGN KEY([VENTAS_TIPO_BUTACA_ID]) REFERENCES [GDD2020].[TIPO_BUTACA]([TIPO_BUTACA_CODIGO]),
		CONSTRAINT FK_VENTAS_PASAJES_RUTA_AEREA_ID FOREIGN KEY([VENTAS_RUTA_AEREA_ID]) REFERENCES [GDD2020].[RUTA_AEREA]([RUTA_AEREA_ID]),
		CONSTRAINT FK_VENTAS_PASAJES_AVION_ID FOREIGN KEY([VENTAS_AVION_ID]) REFERENCES [GDD2020].[AVION]([AVION_IDENTIFICADOR])
	)ON [PRIMARY]

	-- Tabla de hechos Venta Estadias

	-- Solo analizamos las ventas, no tenemos en cuenta las estadias que no estan vendidos. Tomamos como referencia la fecha de la factura.
	CREATE TABLE [GDD2020].[VENTAS_ESTADIAS](
		[VENTAS_FECHA_ID] [int]  NOT NULL,
		[VENTAS_CLIENTE_ID] BIGINT NOT NULL, 
		[VENTAS_PROVEEDOR_ID] BIGINT NOT NULL,
		--medidas:
		[VENTAS_CLIENTE_EDAD] BIGINT NOT NULL, 
		[VENTAS_CANTIDAD_CAMAS][int]  NOT NULL,
		[VENTAS_ESTADIA_CANTIDAD_NOCHES] BIGINT NOT NULL,
		[VENTAS_PRECIO_COSTO][decimal](18, 0) NOT NULL,
		[VENTAS_PRECIO_VENTA][decimal](18, 0) NOT NULL,
		[VENTAS_UTILIDAD][decimal](18, 0) NOT NULL,	
		CONSTRAINT FK_VENTAS_ESTADIA_FECHA_ID FOREIGN KEY([VENTAS_FECHA_ID]) REFERENCES [GDD2020].[Fecha]([DateKey]),
		CONSTRAINT FK_VENTAS_ESTADIA_CLIENTE_ID FOREIGN KEY([VENTAS_CLIENTE_ID]) REFERENCES [GDD2020].[CLIENTE]([CLIENTE_numero]),
		CONSTRAINT FK_VENTAS_ESTADIA_PROVEEDOR_ID FOREIGN KEY([VENTAS_PROVEEDOR_ID]) REFERENCES [GDD2020].[PROVEEDOR]([PROVEEDOR_CODIGO])
	)ON [PRIMARY]

-- Stored Procedure que inserta cada una de las fechas:
GO
create procedure [GDD2020].InsertarFecha
   @CurrentDate datetime
as
insert into [GDD2020].Fecha
		([DateKey], 	
		[Nombre_Mes],
	     [Mes], [Trimestre], [Anio],
	     [Semestre], 
		[Anio_Mes],
	     [Anio_Trimestre], 
		[Anio_Semestre])
   values(
     	(DATEPART(year , @CurrentDate) * 100) + (DATEPART(month , @CurrentDate)*1),
      	DATENAME(month, @CurrentDate),
      	DATEPART(month , @CurrentDate),
      	DATEPART(quarter , @CurrentDate),
      	DATEPART(year , @CurrentDate),
      	CASE WHEN DATEPART(quarter , @CurrentDate) < 3 THEN 1  ELSE 2. END,
      	CAST(DATEPART(year , @CurrentDate) as char(4)) + '-' + RIGHT('0'+CAST(DATEPART(month , @CurrentDate) AS varchar(2)),2),
      	CAST(DATEPART(year , @CurrentDate) as char(4)) + '-' + CAST(DATEPART(quarter , @CurrentDate) AS varchar(1)),
      	CAST(DATEPART(year , @CurrentDate) as char(4)) + '-' + CAST(CASE WHEN DATEPART(quarter , @CurrentDate) < 3 THEN 1 ELSE 2 END AS char(2))
   )
GO

--Bucle de carga de Fechas
--Dejamos cargadas las fechas desde 01/01/2015 al 31/12/2025

declare @StartDate datetime= CONVERT(datetime,'20150101',102), @EndDate datetime =CONVERT(datetime,'20301231',102)
while @StartDate <= @EndDate begin
                       exec [GDD2020].InsertarFecha @StartDate
   set @StartDate = dateadd(month,1,@StartDate)
end

--MIGRANDO DATOS

--cargar ciudades
INSERT INTO GDD2020.CIUDADES
SELECT DISTINCT RUTA_AEREA_CIU_DEST
	FROM GDD2020.RUTA_AEREA


CREATE VIEW TIPO_HABITACION_VIEW AS
SELECT TIPO_HABITACION_CODIGO, GDD2020.cantCamas(TIPO_HABITACION_DESC) AS CANT_CAMAS, TIPO_HABITACION_DESC
	FROM GDD2020.TIPO_HABITACION

	

	--Tabla Ventas_Pasajes
		
	INSERT INTO GDD2020.VENTAS_PASAJES(
		VENTAS_FECHA_ID,
		VENTAS_CLIENTE_ID,
		VENTAS_PROVEEDOR_ID,
		VENTAS_CIUDAD_ORIGEN_ID,
		VENTAS_CIUDAD_DESTINO_ID,
		VENTAS_TIPO_BUTACA_ID,
		VENTAS_RUTA_AEREA_ID,
		VENTAS_AVION_ID,
		VENTAS_Cantidad_Pasajes,
		VENTAS_PRECIO_COSTO,
		VENTAS_PRECIO_VENTA,
		VENTAS_UTILIDAD,
		VENTAS_CLIENTE_EDAD)
	SELECT 
	( DATEPART(year, fa.FACTURA_FECHA ) *100 
			+ DATEPART(MONTH, fa.FACTURA_FECHA )),
		fa.NUMERO_CLIENTE,
		cp.PROVEEDOR_CODIGO, 
		ciuOri. CIUDADES_ID,
		ciuDest.CIUDADES_ID,
		pa.pasaje_tipo_butaca,
		ra.RUTA_AEREA_ID,
		avion.AVION_IDENTIFICADOR,
		1,
		pa.PASAJE_COSTO,
		pa.PASAJE_PRECIO,
		pa.PASAJE_PRECIO - pa.PASAJE_COSTO,	 
		(DATEDIFF(YEAR,cli.CLIENTE_FECHA_NAC,fa.FACTURA_FECHA)
				-(CASE
			  WHEN DATEADD(YY,DATEDIFF(YEAR,cli.CLIENTE_FECHA_NAC,fa.FACTURA_FECHA),cli.CLIENTE_FECHA_NAC)>GETDATE() THEN 1
			  ELSE 0 END)) 
		FROM GDD2020.FACTURA fa
	JOIN GDD2020.PASAJE pa 
		ON pa.PASAJE_FACTURA_NRO = fa.FACTURA_NRO
	JOIN GDD2020.VUELO vue
		ON pa.VUELO_CODIGO = vue.VUELO_CODIGO
	JOIN GDD2020.RUTA_AEREA ra
		ON vue.VUELO_RUTA_AEREA_ID = ra.RUTA_AEREA_ID
	JOIN GDD2020.CIUDADES ciuOri
		ON ra.RUTA_AEREA_CIU_ORIG = ciuOri.CIUDADES_NOMBRE
	JOIN GDD2020.CIUDADES ciuDest
		ON ra.RUTA_AEREA_CIU_DEST = ciuDest.CIUDADES_NOMBRE
	JOIN GDD2020.AVION avion
		ON vue.VUELO_AVION_IDENTIFICADOR = avion.AVION_IDENTIFICADOR
	JOIN GDD2020.CLIENTE cli
		ON fa.NUMERO_CLIENTE = cli.CLIENTE_NUMERO
	JOIN GDD2020.COMPRA cp
		ON cp.COMPRA_NUMERO = pa.PASAJE_COMPRA_NRO




	--Tabla Ventas_Pasajes

	INSERT INTO  [GDD2020].[VENTAS_ESTADIAS](
		[VENTAS_FECHA_ID],
		[VENTAS_CLIENTE_ID], 
		[VENTAS_PROVEEDOR_ID],
		[VENTAS_COMPRA_NRO_ID],--VER
		[VENTAS_ESTADIA_CODIGO],--VER
		--medidas:
		[VENTAS_CLIENTE_EDAD], 
		[VENTAS_CANTIDAD_CAMAS],
		[VENTAS_ESTADIA_CANTIDAD_NOCHES],
		[VENTAS_PRECIO_COSTO],
		[VENTAS_PRECIO_VENTA],
		[VENTAS_UTILIDAD]

	SELECT (DATEPART(year , f.factura_fecha) * 100) + (DATEPART(month ,f.factura_fecha)*1), 
	f.numero_cliente, 
	c.PROVEEDOR_CODIGO, 
	f.compra_numero,
	(DATEDIFF(YEAR,CLIENTE_FECHA_NAC,FACTURA_FECHA)
			-(CASE
			WHEN DATEADD(YY,DATEDIFF(YEAR,CLIENTE_FECHA_NAC,FACTURA_FECHA),CLIENTE_FECHA_NAC)>GETDATE() THEN 1
			ELSE 0 END) ),
	--falta cantidad de camas
	ce.estadia_cantidad_noches,
	ce.estadia_precio_costo,
	ve2.estadia_precio_venta
FROM GDD2020.FACTURA f
JOIN GDD2020.COMPRA c ON f.compra_numero = c.COMPRA_NUMERO 
JOIN GDD2020.COMPRA_ESTADIA ce ON  c.COMPRA_NUMERO = ce.estadia_compra_numero
JOIN GDD2020.CLIENTE c2 ON f.numero_cliente = c2.cliente_numero
JOIN GDD2020.VENTA_ESTADIA ve2  on ve2.factura_nro = f.factura_nro